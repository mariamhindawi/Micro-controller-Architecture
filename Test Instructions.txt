
// The instruction format is as follows:
// opcode(5 bits) rd(5 bits) r1(5 bits) r2(5 bits) immediate(12 bits), in that order.
// For example "xxxxx xxxxx xxxxx xxxxx xxxxxxxxxxxx".

// The purpose and exact use of each field as well as which instruction use which fields is included in details in the report file,
// please check it for further details.

// The binary instructions of the program to be loaded into the instruction memory should be entered in the console one after the other, (or all pasted at once),
// with an enter pressed between them and 2 enters pressed at the end of the program to indicate that no more instructions will be entered.

// To ease the testing process, each register in the register file is initialized to contain the 32-bit binary value equivalent to its number.
// For example, register 5 contains initially "00000000000000000000000000000101".
// The same is also the case in the data memory, each cell initially contains the 32-bit binary representation of its address.
// For example, cell 5 in the data memory contains initially "00000000000000000000000000000101".
// Their contents then change according to the program that will run afterwards.

// This is an example program in the binary instruction format and its corresponding assembly format:

00  00010000100000000000000000000101			addi  r2 r0 5
01  01001000000010100111000000000000			sw    r5 r7
02  00001000110010000110000000000000			add   r3 r4 r6
03  00100010000100101010000000000000			or    r8 r9 r10
04  01010000000000000010000000001010			beq   r0 r2 10
05  00000010110110011111000000000000			sub   r11 r12 r31
06  01000100010010100000000000000000			lw    r17 r5
07  01101000000110000000000000000000			jr    r12
08  00001000000000000000000000000000			add   r0 r0 r0
09  00001000000000000000000000000000			add   r0 r0 r0
10  00101011010111000000000000100000			andi  r13 r14 32
11  00110011110100100111000000000000			srl   r15 r9 r7
12  00111100000100100111000000000000			sll   r16 r9 r7
13  01011000001110111111000000010010			blt   r29 r31 18
14  00001000000000000000000000000000			add   r0 r0 r0
15  00001000000000000000000000000000			add   r0 r0 r0
16  00001000000000000000000000000000			add   r0 r0 r0
17  01100000010101100000000000001000			slti  r1 r11 8
18  00001101001010110110000000000000			add   r20 r21 r22
19  01011000001111111101000000011100			blt   r31 r29 28
20  01010000000000000000000000011001			beq   r0 r0 25
21  00001000000000000000000000000000			add   r0 r0 r0
22  00001000000000000000000000000000			add   r0 r0 r0
23  00001000000000000000000000000000			add   r0 r0 r0
24  00001000000000000000000000000000			add   r0 r0 r0
25  01100110110000000000000000001000			slti  r27 r0 8
26  00101011010111000000000000100000			andi  r13 r14 32
27  00110011110100100111000000000000			srl   r15 r9 r7
28  01000101110000100000000000000000			lw    r23 r1
29  00011110000100101010000000000000			mul   r24 r9 r10
30  01100110101111000000000000001000			slti  r26 r30 8
31  01000111000000100000000000000000			lw    r28 r1

// Assembly code (for illustration NOT to be entered in the console):

addi  r2 r0 5
sw    r5 r7
add   r3 r4 r6
or    r8 r9 r10
beq   r0 r2 10
sub   r11 r12 r31
lw    r17 r5
jr    r12
add   r0 r0 r0
add   r0 r0 r0
andi  r13 r14 32
srl   r15 r9 r7
sll   r16 r9 r7
blt   r29 r31 18
add   r0 r0 r0
add   r0 r0 r0
add   r0 r0 r0
slti  r1 r11 8
add   r20 r21 r22
blt   r31 r29 28
beq   r0 r0 25
add   r0 r0 r0
add   r0 r0 r0
add   r0 r0 r0
add   r0 r0 r0
slti  r27 r0 8
andi  r13 r14 32
srl   r15 r9 r7
lw    r23 r1
mul   r24 r9 r10
slti  r26 r30 8
lw    r28 r1

// Code in binary format:

// Please copy the following lines (or any other program in the specified binary format) and paste it in the console after running the main method,
// and then press enter twice to start simulating the program.
00010000100000000000000000000101
01001000000010100111000000000000
00001000110010000110000000000000
00100010000100101010000000000000
01010000000000000010000000001010
00000010110110011111000000000000
01000100010010100000000000000000
01101000000110000000000000000000
00001000000000000000000000000000
00001000000000000000000000000000
00101011010111000000000000100000
00110011110100100111000000000000
00111100000100100111000000000000
01011000001110111111000000010010
00001000000000000000000000000000
00001000000000000000000000000000
00001000000000000000000000000000
01100000010101100000000000001000
00001101001010110110000000000000
01011000001111111101000000011100
01010000000000000000000000011001
00001000000000000000000000000000
00001000000000000000000000000000
00001000000000000000000000000000
00001000000000000000000000000000
01100110110000000000000000001000
00101011010111000000000000100000
00110011110100100111000000000000
01000101110000100000000000000000
00011110000100101010000000000000
01100110101111000000000000001000
01000111000000100000000000000000
